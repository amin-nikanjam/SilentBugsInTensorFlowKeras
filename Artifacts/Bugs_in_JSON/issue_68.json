{
  "url": "https://api.github.com/repos/tensorflow/tensorflow/issues/38197",
  "repository_url": "https://api.github.com/repos/tensorflow/tensorflow",
  "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/38197/labels{/name}",
  "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/38197/comments",
  "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/38197/events",
  "html_url": "https://github.com/tensorflow/tensorflow/issues/38197",
  "id": 593385729,
  "node_id": "MDU6SXNzdWU1OTMzODU3Mjk=",
  "number": 38197,
  "title": "Model not deterministic, even though os.environ['TF_DETERMINISTIC_OPS'] = '1' is set",
  "user": {
    "login": "Zethson",
    "id": 21954664,
    "node_id": "MDQ6VXNlcjIxOTU0NjY0",
    "avatar_url": "https://avatars.githubusercontent.com/u/21954664?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Zethson",
    "html_url": "https://github.com/Zethson",
    "followers_url": "https://api.github.com/users/Zethson/followers",
    "following_url": "https://api.github.com/users/Zethson/following{/other_user}",
    "gists_url": "https://api.github.com/users/Zethson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Zethson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Zethson/subscriptions",
    "organizations_url": "https://api.github.com/users/Zethson/orgs",
    "repos_url": "https://api.github.com/users/Zethson/repos",
    "events_url": "https://api.github.com/users/Zethson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Zethson/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 473172988,
      "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=",
      "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug",
      "name": "type:bug",
      "color": "159b2e",
      "default": false,
      "description": "Bug"
    },
    {
      "id": 1097546578,
      "node_id": "MDU6TGFiZWwxMDk3NTQ2NTc4",
      "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:keras",
      "name": "comp:keras",
      "color": "0052cc",
      "default": false,
      "description": "Keras related issues"
    },
    {
      "id": 1097547538,
      "node_id": "MDU6TGFiZWwxMDk3NTQ3NTM4",
      "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:gpu",
      "name": "comp:gpu",
      "color": "0052cc",
      "default": false,
      "description": "GPU related issues"
    },
    {
      "id": 1903591931,
      "node_id": "MDU6TGFiZWwxOTAzNTkxOTMx",
      "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/TF%202.2",
      "name": "TF 2.2",
      "color": "0052cc",
      "default": false,
      "description": "Issues related to TF 2.2"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "sanjoy",
    "id": 136291,
    "node_id": "MDQ6VXNlcjEzNjI5MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/136291?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sanjoy",
    "html_url": "https://github.com/sanjoy",
    "followers_url": "https://api.github.com/users/sanjoy/followers",
    "following_url": "https://api.github.com/users/sanjoy/following{/other_user}",
    "gists_url": "https://api.github.com/users/sanjoy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sanjoy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sanjoy/subscriptions",
    "organizations_url": "https://api.github.com/users/sanjoy/orgs",
    "repos_url": "https://api.github.com/users/sanjoy/repos",
    "events_url": "https://api.github.com/users/sanjoy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sanjoy/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "sanjoy",
      "id": 136291,
      "node_id": "MDQ6VXNlcjEzNjI5MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/136291?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjoy",
      "html_url": "https://github.com/sanjoy",
      "followers_url": "https://api.github.com/users/sanjoy/followers",
      "following_url": "https://api.github.com/users/sanjoy/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjoy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjoy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjoy/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjoy/orgs",
      "repos_url": "https://api.github.com/users/sanjoy/repos",
      "events_url": "https://api.github.com/users/sanjoy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjoy/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 20,
  "created_at": "2020-04-03T13:32:41Z",
  "updated_at": "2020-08-26T07:55:17Z",
  "closed_at": "2020-08-26T07:55:16Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**System information** \r\n- Have I written custom code (as opposed to using a stock\r\nexample script provided in TensorFlow):  Pretty much the MirroredStrategy fmnist example\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): tensorflow/tensorflow:2.2.0rc2-gpu-py3\r\n- TensorFlow installed from (source or\r\nbinary): tensorflow/tensorflow:2.2.0rc2-gpu-py3\r\n- TensorFlow version (use command below): tensorflow/tensorflow:2.2.0rc2-gpu-py3\r\n- Python version: tensorflow/tensorflow:2.2.0rc2-gpu-py3\r\n- CUDA/cuDNN version: tensorflow/tensorflow:2.2.0rc2-gpu-py3\r\n- GPU model and memory: 1050M\r\n\r\n**Describe the current behavior**\r\nModel is not deterministic/reproducible.\r\nTwo runs:\r\n```\r\nDownloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\r\n11493376/11490434 [==============================] - 2s 0us/step\r\nEpoch 1, Loss: 0.17844311892986298, Accuracy: 0.9466999769210815,Test Loss: 0.057941436767578125, Test Accuracy: 0.9815000295639038\r\nEpoch 2, Loss: 0.05286668613553047, Accuracy: 0.9836500287055969,Test Loss: 0.044471099972724915, Test Accuracy: 0.9853000044822693\r\nEpoch 3, Loss: 0.03694676235318184, Accuracy: 0.9883000254631042,Test Loss: 0.034947194159030914, Test Accuracy: 0.9897000193595886\r\nEpoch 4, Loss: 0.028592929244041443, Accuracy: 0.9910500049591064,Test Loss: 0.027234185487031937, Test Accuracy: 0.9907000064849854\r\nEpoch 5, Loss: 0.022629836574196815, Accuracy: 0.9927666783332825,Test Loss: 0.029115190729498863, Test Accuracy: 0.9904000163078308\r\nEpoch 6, Loss: 0.0172086451202631, Accuracy: 0.9944999814033508,Test Loss: 0.027797872200608253, Test Accuracy: 0.9902999997138977\r\nEpoch 7, Loss: 0.013981950469315052, Accuracy: 0.9956499934196472,Test Loss: 0.02764272689819336, Test Accuracy: 0.9909999966621399\r\nEpoch 8, Loss: 0.01210874691605568, Accuracy: 0.9961333274841309,Test Loss: 0.035009630024433136, Test Accuracy: 0.9896000027656555\r\nEpoch 9, Loss: 0.008961305022239685, Accuracy: 0.9971666932106018,Test Loss: 0.034057389944791794, Test Accuracy: 0.9905999898910522\r\nEpoch 10, Loss: 0.00800476036965847, Accuracy: 0.9972166419029236,Test Loss: 0.033878158777952194, Test Accuracy: 0.9900000095367432\r\nGPU Run Time: 70.80781483650208 seconds\r\n```\r\n\r\n```\r\nDownloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\r\n11493376/11490434 [==============================] - 2s 0us/step\r\nEpoch 1, Loss: 0.1761329025030136, Accuracy: 0.9478499889373779,Test Loss: 0.05224931612610817, Test Accuracy: 0.9835000038146973\r\nEpoch 2, Loss: 0.05251472815871239, Accuracy: 0.9836666584014893,Test Loss: 0.04059470072388649, Test Accuracy: 0.9860000014305115\r\nEpoch 3, Loss: 0.03771379590034485, Accuracy: 0.98785001039505,Test Loss: 0.03189479187130928, Test Accuracy: 0.9894000291824341\r\nEpoch 4, Loss: 0.027971116825938225, Accuracy: 0.9912333488464355,Test Loss: 0.03176414594054222, Test Accuracy: 0.9890000224113464\r\nEpoch 5, Loss: 0.022653400897979736, Accuracy: 0.9925000071525574,Test Loss: 0.03643624112010002, Test Accuracy: 0.9876999855041504\r\nEpoch 6, Loss: 0.01727919466793537, Accuracy: 0.9942166805267334,Test Loss: 0.02887595444917679, Test Accuracy: 0.9901000261306763\r\nEpoch 7, Loss: 0.01397143118083477, Accuracy: 0.9957500100135803,Test Loss: 0.03118096850812435, Test Accuracy: 0.9905999898910522\r\nEpoch 8, Loss: 0.01202292088419199, Accuracy: 0.9961333274841309,Test Loss: 0.03164077177643776, Test Accuracy: 0.9909999966621399\r\nEpoch 9, Loss: 0.008715414442121983, Accuracy: 0.9971333146095276,Test Loss: 0.04146642982959747, Test Accuracy: 0.9896000027656555\r\nEpoch 10, Loss: 0.008586470037698746, Accuracy: 0.9969000220298767,Test Loss: 0.033046264201402664, Test Accuracy: 0.9902999997138977\r\nGPU Run Time: 72.08828902244568 seconds\r\n```\r\n\r\n**Describe the expected behavior**\r\nI expect the model to be reproducible with the same loss, accuracy etc\r\n**Standalone code to reproduce the issue** \r\n```\r\n#!/usr/bin/env python \r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport argparse\r\nimport time\r\nimport random\r\nimport os\r\n\r\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D\r\nfrom tensorflow.keras import Model\r\n\r\n\r\ndef random_seed(seed):\r\n    os.environ['PYTHONHASHSEED'] = str(seed) # Python general\r\n    np.random.seed(seed)\r\n    random.seed(seed) # Python random\r\n    tf.random.set_seed(seed)\r\n    os.environ['TF_DETERMINISTIC_OPS'] = '1'\r\n\r\n# Not yet using click due to Docker issues\r\nparser = argparse.ArgumentParser(description='Tensorflow entry point')\r\nparser.add_argument('--epochs', type=int, default=10)\r\nparser.add_argument('--seed', type=int, default=0)\r\nargs = parser.parse_args()\r\n\r\n# Detect GPUs\r\nprint(f'Num GPUs Available: {len(tf.config.experimental.list_physical_devices(\"GPU\"))}')\r\n\r\n# Load MNIST\r\nmnist = tf.keras.datasets.mnist\r\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\r\n\r\n# Adding a dimension to the array -> new shape == (28, 28, 1), since the first layer in our model is a convolutional\r\n# layer and it requires a 4D input (batch_size, height, width, channels).\r\n# batch_size dimension will be added later on.\r\ntrain_images = train_images[..., None]\r\ntest_images = test_images[..., None]\r\n\r\n# Normalizing the images to [0, 1] range.\r\ntrain_images = train_images / np.float32(255)\r\ntest_images = test_images / np.float32(255)\r\n\r\n# Use MirroredStrategy for multi GPU support\r\n# If the list of devices is not specified in the`tf.distribute.MirroredStrategy` constructor, it will be auto-detected.\r\nstrategy = tf.distribute.MirroredStrategy()\r\n\r\nBUFFER_SIZE = len(train_images)\r\nBATCH_SIZE_PER_REPLICA = 64\r\nGLOBAL_BATCH_SIZE = BATCH_SIZE_PER_REPLICA * strategy.num_replicas_in_sync\r\n\r\n# Batch and distribute data\r\ntrain_dataset = tf.data.Dataset.from_tensor_slices((train_images, train_labels)).shuffle(BUFFER_SIZE).batch(GLOBAL_BATCH_SIZE) \r\ntest_dataset = tf.data.Dataset.from_tensor_slices((test_images, test_labels)).shuffle(BUFFER_SIZE).batch(GLOBAL_BATCH_SIZE) \r\ntrain_dist_dataset = strategy.experimental_distribute_dataset(train_dataset)\r\ntest_dist_dataset = strategy.experimental_distribute_dataset(test_dataset)\r\n\r\n# Fix seeds\r\nrandom_seed(0)\r\n\r\n# Define model\r\ndef create_model():\r\n    model = tf.keras.Sequential([\r\n    tf.keras.layers.Conv2D(32, 3, activation='relu'),\r\n    tf.keras.layers.MaxPooling2D(),\r\n    tf.keras.layers.Conv2D(64, 3, activation='relu'),\r\n    tf.keras.layers.MaxPooling2D(),\r\n    tf.keras.layers.Flatten(),\r\n    tf.keras.layers.Dense(64, activation='relu'),\r\n    tf.keras.layers.Dense(10)\r\n    ])\r\n\r\n    return model\r\n\r\n# Define Loss and accuracyc metrics\r\nwith strategy.scope():\r\n    # Set reduction to `none` so reduction can be done afterwards and divide by global batch size.\r\n    loss_object = tf.keras.losses.SparseCategoricalCrossentropy(\r\n        from_logits=True,\r\n        reduction=tf.keras.losses.Reduction.NONE)\r\n    def compute_loss(labels, predictions):\r\n        per_example_loss = loss_object(labels, predictions)\r\n\r\n        return tf.nn.compute_average_loss(per_example_loss, global_batch_size=GLOBAL_BATCH_SIZE)\r\n\r\n    test_loss = tf.keras.metrics.Mean(name='test_loss')\r\n\r\n    train_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='train_accuracy')\r\n    test_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='test_accuracy')\r\n\r\n\r\n# Define model, optimizer, training- and test step\r\nwith strategy.scope():\r\n  model = create_model()\r\n  optimizer = tf.keras.optimizers.Adam()\r\n\r\n  def train_step(inputs):\r\n    images, labels = inputs\r\n\r\n    with tf.GradientTape() as tape:\r\n        predictions = model(images, training=True)\r\n        loss = compute_loss(labels, predictions)\r\n\r\n    gradients = tape.gradient(loss, model.trainable_variables)\r\n    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\r\n    train_accuracy.update_state(labels, predictions)\r\n\r\n    return loss \r\n\r\n  def test_step(inputs):\r\n    images, labels = inputs\r\n\r\n    predictions = model(images, training=False)\r\n    t_loss = loss_object(labels, predictions)\r\n    test_loss.update_state(t_loss)\r\n    test_accuracy.update_state(labels, predictions)\r\n\r\n\r\nwith strategy.scope():\r\n  # `run` replicates the provided computation and runs it with the distributed input.\r\n  @tf.function\r\n  def distributed_train_step(dataset_inputs):\r\n    per_replica_losses = strategy.run(train_step, args=(dataset_inputs,))\r\n    return strategy.reduce(tf.distribute.ReduceOp.SUM, per_replica_losses, axis=None)\r\n \r\n  @tf.function\r\n  def distributed_test_step(dataset_inputs):\r\n    return strategy.run(test_step, args=(dataset_inputs,))\r\n\r\n  gpu_runtime = time.time()\r\n  for epoch in range(args.epochs):\r\n    # TRAIN LOOP\r\n    total_loss = 0.0\r\n    num_batches = 0\r\n    for dist_dataset in train_dist_dataset:\r\n      total_loss += distributed_train_step(dist_dataset)\r\n      num_batches += 1\r\n    train_loss = total_loss / num_batches\r\n\r\n    # TEST LOOP\r\n    for dist_dataset in test_dist_dataset:\r\n      distributed_test_step(dist_dataset)\r\n\r\n    print(f'Epoch {epoch + 1}, Loss: {train_loss}, Accuracy: {train_accuracy.result()},'\r\n          f'Test Loss: {test_loss.result()}, Test Accuracy: {test_accuracy.result()}')\r\n\r\n    # Reset states\r\n    test_loss.reset_states()\r\n    train_accuracy.reset_states()\r\n    test_accuracy.reset_states()\r\n\r\n  print(f'GPU Run Time: {str(time.time() - gpu_runtime)} seconds')\r\n```\r\n\r\n\r\n**Other info / logs** Include any logs or source code that would be helpful to\r\ndiagnose the problem. If including tracebacks, please include the full\r\ntraceback. Large logs and files should be attached.\r\n```\r\ndef random_seed(seed):\r\n    os.environ['PYTHONHASHSEED'] = str(seed) # Python general\r\n    np.random.seed(seed)\r\n    random.seed(seed) # Python random\r\n    tf.random.set_seed(seed)\r\n    os.environ['TF_DETERMINISTIC_OPS'] = '1'\r\n```\r\nI guess this should cover everything?\r\n\r\nThe code is currently running on a SINGLE GPU, even though I'm planning to run it on several GPUs.",
  "closed_by": {
    "login": "Zethson",
    "id": 21954664,
    "node_id": "MDQ6VXNlcjIxOTU0NjY0",
    "avatar_url": "https://avatars.githubusercontent.com/u/21954664?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Zethson",
    "html_url": "https://github.com/Zethson",
    "followers_url": "https://api.github.com/users/Zethson/followers",
    "following_url": "https://api.github.com/users/Zethson/following{/other_user}",
    "gists_url": "https://api.github.com/users/Zethson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Zethson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Zethson/subscriptions",
    "organizations_url": "https://api.github.com/users/Zethson/orgs",
    "repos_url": "https://api.github.com/users/Zethson/repos",
    "events_url": "https://api.github.com/users/Zethson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Zethson/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/tensorflow/tensorflow/issues/38197/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/38197/timeline",
  "performed_via_github_app": null
}
